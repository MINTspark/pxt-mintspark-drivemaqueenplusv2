<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="7uUGZ40]H@Ds~izm]oa2" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="DBMQH/yGO{z*cCJ8fYHJ" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace EasyMaqueenPlusV2 {" line1="    let steeringCorrection = 0;" line2="    let distanceCorrection = 0;" line3="    let wheelDiameter = 43;" line4="    let minSpeed = 30;" line5="    let wheelDegreesPerTurnDegree = 2.5;" line6="" line7="    //Turn direction enumeration selection" line8="    export enum MyEnumTurnDirection {" line9="        //% block=&quot;turn left&quot;" line10="        Left," line11="        //% block=&quot;turn right&quot;" line12="        Right" line13="    };" line14="" line15="    //% group=&quot;Basic control&quot;" line16="    //% block=&quot;drive %edir speed %speed&quot;" line17="    //% speed.min=30 speed.max=255" line18="    //% weight=29" line19="    export function drive(direction: maqueenPlusV2.MyEnumDir, speed: number): void {" line20="        if (speed &lt; minSpeed) { speed = minSpeed; }" line21="        maqueenPlusV2.controlMotor(maqueenPlusV2.MyEnumMotor.LeftMotor, direction, speed * getSteeringCorrectionPercent(speed));" line22="        maqueenPlusV2.controlMotor(maqueenPlusV2.MyEnumMotor.RightMotor, direction, speed);" line23="    }" line24="" line25="    //% group=&quot;Basic control&quot;" line26="    //% block=&quot;drive %edir speed %speed for %seconds seconds&quot;" line27="    //% speed.min=30 speed.max=255" line28="    //% weight=28" line29="    export function driveTime(direction: maqueenPlusV2.MyEnumDir, speed: number, seconds: number): void {" line30="        if (speed &lt; minSpeed) { speed = minSpeed; }" line31="        maqueenPlusV2.controlMotor(maqueenPlusV2.MyEnumMotor.LeftMotor, direction, speed * getSteeringCorrectionPercent(speed));" line32="        maqueenPlusV2.controlMotor(maqueenPlusV2.MyEnumMotor.RightMotor, direction, speed);" line33="        basic.pause(seconds * 1000);" line34="        maqueenPlusV2.controlMotorStop(maqueenPlusV2.MyEnumMotor.AllMotor);" line35="    }" line36="" line37="    //% group=&quot;Basic control&quot;" line38="    //% block=&quot;drive %edir speed %speed for distance %distance&quot;" line39="    //% speed.min=30 speed.max=255" line40="    //% weight=27" line41="    export function driveDistance(direction: maqueenPlusV2.MyEnumDir, speed: number, distance: number): void {" line42="        if (speed &lt; minSpeed) { speed = minSpeed; }" line43="        let microsecondsToRun = getTimeMsForDistanceAndSpeed(speed, distance * getDistanceCorrectionPercent());" line44="        maqueenPlusV2.controlMotor(maqueenPlusV2.MyEnumMotor.LeftMotor, direction, speed * getSteeringCorrectionPercent(speed));" line45="        maqueenPlusV2.controlMotor(maqueenPlusV2.MyEnumMotor.RightMotor, direction, speed);" line46="        basic.pause(microsecondsToRun);" line47="        maqueenPlusV2.controlMotorStop(maqueenPlusV2.MyEnumMotor.AllMotor);" line48="    }" line49="" line50="    //% group=&quot;Basic control&quot;" line51="    //% block=&quot;stop&quot;" line52="    //% weight=26" line53="    export function controlMotorStop(): void {" line54="        maqueenPlusV2.controlMotorStop(maqueenPlusV2.MyEnumMotor.AllMotor);" line55="    }" line56="" line57="    //% group=&quot;Turn Controls&quot;" line58="    //% block=&quot;%turnDirection for %degrees degrees with speed %speed&quot;" line59="    //% speed.min=30 speed.max=255" line60="    //% weight=29" line61="    export function turn(turnDirection: MyEnumTurnDirection, degrees: number, speed: number): void {" line62="        if (speed &lt; minSpeed) { speed = minSpeed; }" line63="" line64="        let leftMotorDirection = maqueenPlusV2.MyEnumDir.Forward;" line65="        let rightMotorDirection = maqueenPlusV2.MyEnumDir.Backward;" line66="" line67="        if (turnDirection == MyEnumTurnDirection.Left)" line68="        {" line69="            leftMotorDirection = maqueenPlusV2.MyEnumDir.Backward;" line70="            rightMotorDirection = maqueenPlusV2.MyEnumDir.Forward;" line71="        }" line72="" line73="        maqueenPlusV2.controlMotor(maqueenPlusV2.MyEnumMotor.LeftMotor, leftMotorDirection, speed * getSteeringCorrectionPercent(speed));" line74="        maqueenPlusV2.controlMotor(maqueenPlusV2.MyEnumMotor.RightMotor, rightMotorDirection, speed);" line75="        basic.pause(getTimeMsForDegreesAndSpeed(speed, degrees * wheelDegreesPerTurnDegree));" line76="        maqueenPlusV2.controlMotorStop(maqueenPlusV2.MyEnumMotor.AllMotor);" line77="    }" line78="" line79="    //% group=&quot;Adjustments&quot;" line80="    //% block=&quot;read steering correction \\%&quot;" line81="    //% weight=98" line82="    export function readSteeringCorrection(): number {" line83="        return steeringCorrection;" line84="    }" line85="" line86="    //% group=&quot;Adjustments&quot;" line87="    //% block=&quot;read distance correction \\%&quot;" line88="    //% weight=98" line89="    export function readDistanceCorrection(): number {" line90="        return distanceCorrection;" line91="    }" line92="" line93="    //% group=&quot;Adjustments&quot;" line94="    //% block=&quot;set steering correction %correction \\% (positive number turns more to the right)&quot;" line95="    //% weight=98" line96="    export function setSteeringCorrection(correction: number): void {" line97="        steeringCorrection = correction;" line98="    }" line99="" line100="    //% group=&quot;Adjustments&quot;" line101="    //% block=&quot;set distance correction %correction \\%&quot;" line102="    //% weight=98" line103="    export function setDistanceCorrection(correction: number): void {" line104="        distanceCorrection = correction;" line105="    }" line106="" line107="    //% group=&quot;Adjustments&quot;" line108="    //% block=&quot;set wheel diameter %diameter&quot;" line109="    //% weight=98" line110="    export function setWheelDiameterCorrection(diameter: number): void {" line111="        wheelDiameter = diameter;" line112="    }" line113="" line114="" line115="    function getTimeMsForDistanceAndSpeed(speed: number, distance:number) : number" line116="    {" line117="        let degreesOneSecond = 6E-05 * speed * speed * speed - 0.0332 * speed * speed + 6.28*speed - 12.616;" line118="        let distanceOneDegree = wheelDiameter * Math.PI / 360;" line119="        return (distance / (degreesOneSecond * distanceOneDegree)) * 1000;" line120="    }" line121="" line122="    function getTimeMsForDegreesAndSpeed(speed: number, degrees: number): number {" line123="        let degreesOneSecond2 = 6E-05 * speed * speed * speed - 0.0332 * speed * speed + 6.28 * speed - 12.616;" line124="        return (1 / degreesOneSecond2) * degrees * 1000;" line125="    }" line126="" line127="    function getDistanceCorrectionPercent() : number {" line128="        return (100 + distanceCorrection) / 100;" line129="    }" line130="" line131="    function getSteeringCorrectionPercent(speed: number): number {" line132="        let adjustedCorrection = 2E-07 * speed * speed * speed - 9E-05 * speed * speed + 0.0174 * speed - 0.035" line133="        return (100 + (steeringCorrection * adjustedCorrection)) / 100;" line134="    }" line135="}" numlines="136"></mutation></block></statement></block></xml>